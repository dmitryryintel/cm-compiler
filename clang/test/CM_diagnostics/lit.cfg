# -*- Python -*-

# Configuration file for the 'lit' test runner.

import os

import lit.formats
import lit.util

# name: The name of this test suite.
config.name = 'CM_diagnostics'

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.cpp']

# test_exec_root: The root path where tests should be run.
# The value below isn't used, but it can't be None here so we just
# set it to the directory name.
config.test_exec_root = 'CM_diagnostics'

# testFormat: The test format to use to interpret tests.
llvm_build_mode = getattr(config, 'llvm_build_mode', "Release")
#config.test_format = lit.formats.GoogleTest(llvm_build_mode, 'Tests')
config.test_format = lit.formats.ShTest(False)

# Propagate the temp directory. Windows requires this because it uses \Windows\
# if none of these are present.
if 'TMP' in os.environ:
    config.environment['TMP'] = os.environ['TMP']
if 'TEMP' in os.environ:
    config.environment['TEMP'] = os.environ['TEMP']

# Propagate path to symbolizer for ASan/MSan.
for symbolizer in ['ASAN_SYMBOLIZER_PATH', 'MSAN_SYMBOLIZER_PATH']:
    if symbolizer in os.environ:
        config.environment[symbolizer] = os.environ[symbolizer]

# Discover the 'cmc' command to use.

import os

def inferCMTool(PATH, exe_name):
    env = exe_name.upper()
    tool = os.getenv(env)

    if tool:
        return tool

    tool = lit.util.which(exe_name, PATH)

    if not tool:
        lit_config.fatal("couldn't find '{0}' program in your path, try setting "
                         "{1} in your environment".format(exe_name, env))
    return tool

config.cmc = inferCMTool((config.environment['PATH']).replace('\\', '/'), 'cmc')
config.cmoc = inferCMTool((config.environment['PATH']).replace('\\', '/'), 'cmoc')
config.genxir = inferCMTool((config.environment['PATH']).replace('\\', '/'), 'GenX_IR')

if not lit_config.quiet:
    lit_config.note('using cmc: %r' % config.cmc)
    lit_config.note('using cmoc: %r' % config.cmoc)

config.substitutions.append( ('%cmc', ' ' + config.cmc + ' ') )
config.substitutions.append( ('%cmoc', ' ' + config.cmoc + ' ') )
config.substitutions.append( ('%genxir', config.genxir ) )
config.substitutions.append( ('%cm_headers', lit_config.params.get('cm_headers', '/dev/null')) )

# FIXME: Find nicer way to prohibit this.
config.substitutions.append(
    (' cmc ', """*** Do not use 'cmc' in tests, use '%cmc'. ***""") )
config.substitutions.append(
    (' cmoc ', """*** Do not use 'cmoc' in tests, use '%cmoc'. ***""") )
###

# Check that the object root is known.
if config.test_exec_root is None:
    # Otherwise, we haven't loaded the site specific configuration (the user is
    # probably trying to run on a test file directly, and either the site
    # configuration hasn't been created by the build system, or we are in an
    # out-of-tree build situation).

    # Check for 'cm_diagnostics_site_config' user parameter, and use that if available.
    site_cfg = lit_config.params.get('cm_diagnostics_site_config', None)
    if site_cfg and os.path.exists(site_cfg):
        lit_config.load_config(config, site_cfg)
        raise SystemExit

    # Try to detect the situation where we are using an out-of-tree build by
    # looking for 'llvm-config'.
    #
    # FIXME: I debated (i.e., wrote and threw away) adding logic to
    # automagically generate the lit.site.cfg if we are in some kind of fresh
    # build situation. This means knowing how to invoke the build system
    # though, and I decided it was too much magic.

    llvm_config = lit.util.which('llvm-config', config.environment['PATH'])
    if not llvm_config:
        lit_config.fatal('No site specific configuration available!')

    # Get the source and object roots.
    llvm_src_root = lit.util.capture(['llvm-config', '--src-root']).strip()
    llvm_obj_root = lit.util.capture(['llvm-config', '--obj-root']).strip()
    clang_src_root = os.path.join(llvm_src_root, "tools", "clang")
    clang_obj_root = os.path.join(llvm_obj_root, "tools", "clang")
    test_source_root = os.path.join(llvm_src_root, 'tools', 'clang', 'CM_diagnostics')
    #lit_config.note("clang_src_root = %s" % clang_src_root)
    #lit_config.note("clang_obj_root = %s" % clang_obj_root)
    #lit_config.note("test_source_root = %s" % test_source_root)

    # Validate that we got a tree which points to here, using the standard
    # tools/clang layout.
    this_src_root = os.path.join(os.path.dirname(__file__),'..','..')
    if os.path.realpath(clang_src_root) != os.path.realpath(this_src_root):
        lit_config.fatal('No site specific configuration available!')

    # Check that the site specific configuration exists.
    site_cfg = os.path.join(clang_obj_root, 'test', 'CM_diagnostics', 'lit.site.cfg')
    lit_config("site_config = %s" % site_config)
    if not os.path.exists(site_cfg):
        lit_config.fatal('No site specific configuration available!')

    # Okay, that worked. Notify the user of the automagic, and reconfigure.
    lit_config.note('using out-of-tree build at %r' % clang_obj_root)
    lit_config.load_config(config, site_cfg)
    raise SystemExit
